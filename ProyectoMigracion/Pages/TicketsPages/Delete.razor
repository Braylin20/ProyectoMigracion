@page "/DeleteTicket/{TicketId:int}"
@inject HttpClient httpClient

<div class="card shadow-lg">

    <div class="card-header">
        <h3 class="text-danger">¿Seguro que quieres eliminar este ticket?</h3>
    </div>
    <div class="card-body">
        <p>TicketId: @Ticket.TicketId</p>
        <p>ClienteId: @Ticket.ClientesId</p>
        <p>PrioridadId: @Ticket.PrioridadesId</p>
        <p>SolicitadoPor: @Ticket.SolicitadoPor</p>
        <p>Asunto: @Ticket.Asunto</p>
        <p>Descripci&oacute;n: @Ticket.Descripcion</p>
        <p>Fecha: @Ticket.Fecha</p>
        @if(Mensaje is not null)
        {
            <p class="text-danger">@Mensaje</p>
        }
    </div>
    <div class="card-footer">
        <div class="btn-group">
            <a href="/IndexTicket" class="btn btn-primary bi bi-arrow-left-square-fill">Atr&aacute;s</a>
            <button class="btn btn-danger bi bi-trash" @onclick="Eliminar">Eliminar</button>
        </div>
    </div>
</div>
@code {

    [Parameter]
    public int TicketId { get; set; }

    public Tickets Ticket { get; set; } = new Tickets();
    public string Mensaje = string.Empty;
    protected async override Task OnInitializedAsync()
    {
        Ticket = (await httpClient.GetFromJsonAsync<Tickets>($"api/tickets/{TicketId}"))!;
    }

    public async Task Eliminar()
    {
        var response = await httpClient.DeleteAsync($"api/tickets/{TicketId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = "No se ha eliminado correctamente";
            return;
        }
        Mensaje = "Eliminado correctamente";
        Ticket = new Tickets();
        StateHasChanged();
    }
}
